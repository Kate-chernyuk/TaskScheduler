#include <iostream>
#include <queue>
#include <mutex>
#include <functional>
#include <thread>
#include <condition_variable>
#include <chrono>

using namespace std;


class TaskScheduler {
    using Task = pair<time_t, function<void()>>;
    struct Compare {
        bool operator() (const Task& a, const Task& b) {
            return a.first > b.first;
        }
    };

    priority_queue<Task, vector<Task>, Compare> tasks_;
    mutex mutex_;
    condition_variable cv_;
    bool isRunning_ = false;
    thread workerThread_;
public:
    TaskScheduler() : tasks_(){ };

    void Add(function<void()> task, time_t timestamp) {
        lock_guard<mutex> lock(mutex_);
        tasks_.emplace(timestamp, task);
        cv_.notify_one();
    }

    void Start() {
        isRunning_ = true;
        workerThread_ = thread(&TaskScheduler::Worker, this);
    }

    void Stop() {
        isRunning_ = false;
        cv_.notify_one();
        if (workerThread_.joinable()) {
            workerThread_.join();
        }
    }
private:
    void Worker() {
        while (isRunning_) {
            unique_lock<mutex> lock(mutex_);
            if (tasks_.empty()) {
                cv_.wait(lock);
            }
            else {
                auto now = time(nullptr);
                if (tasks_.top().first <= now) {
                    auto task = tasks_.top().second;
                    tasks_.pop();
                    lock.unlock(); 
                    task();
                }
                else {
                    cv_.wait_until(lock, chrono::system_clock::from_time_t(tasks_.top().first));
                }
            }
        }
    }
};

int main()
{
    setlocale(LC_ALL, "rus");
    TaskScheduler scheduler;
    scheduler.Start();

    scheduler.Add([]() { cout << "Задача 1.\n"; }, time(nullptr) + 2); // Выполнится через 2 секунды
    scheduler.Add([]() { cout << "Задача 2.\n"; }, time(nullptr) + 5); // Выполнится через 5 секунд

    std::this_thread::sleep_for(chrono::seconds(6)); // Ждем завершения задач
    scheduler.Stop();
    return 0;
}
